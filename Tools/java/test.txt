import com.example.springbootredis.RedisUtil;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.*;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import javax.servlet.http.HttpServletRequest;
import java.io.Serializable;
import java.util.*;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

/**
 * redis测试
 */
@Slf4j
@RestController
public class TestController {
    final Logger logger = LoggerFactory.getLogger(this.getClass());
    @Autowired
    private StringRedisTemplate stringRedisTemplate;
    @Autowired
    private RedisUtil redisUtil;

    ThreadPoolExecutor pool = new ThreadPoolExecutor(2, 2, 10, TimeUnit.SECONDS, new LinkedBlockingQueue<>(1024), (worker, executor) -> {
        try {
            executor.getQueue().put(worker);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    });

    /**
     * 1.批量新增
     */
    @GetMapping("saveString")
    public String saveString(HttpServletRequest request) {

        new Thread(() -> {

            for (int n = 1; n < 20; n  ) {
                HashMap<String, String> datas = new HashMap<>();
                for (int i = 0; i < 50000; i  ) {
                    String uuid = UUID.randomUUID().toString().replace("-", "");
                    datas.put("tom:"   uuid, uuid   uuid   "123456");

                }
                redisUtil.executePipelined(datas, 100);

                logger.info("第{}万", n * 5);
            }
        }).start();

        return "success";
    }

    /**
     * 2.模糊批量删除
     * @return
     */
    @RequestMapping("deleteAll")
    public String delete() {
        while (true) {
            log.info("第一次扫描开始");
            long cursorId = redisUtil.scanAndDelete("tom*");
            if (cursorId == 0) {
                //判断一下，防止没删除干净
                break;
            }
            log.info("第一次扫描结束");
        }
        return "success";
    }
}    
